


/transform/getMatrix = quote(lambda([matrix_str],
  if( strfind("matrix", matrix_str) != -1,
    float32(split(" ", strchar( aseq(7, strlen(matrix_str) - 2), matrix_str)))
  )
)),

/transform/applyTransform = quote(lambda([matrix, xy ],
  [  matrix[[0]] * xy[[0]] + matrix[[2]] * xy[[1]] + matrix[[4]], 
     matrix[[1]] * xy[[0]] + matrix[[3]] * xy[[1]] + matrix[[5]]
  ]
)),

/helper/getChildByClass = quote(
    lambda([obj, classname],
        /found = {},
        if( bound(obj./children) ,
            map( lambda([c],
                    if( c./class == classname,
                        /found = c
                    )
                ), obj./children
            )
        ),
        prog1(
            /found,
            delete(/found)
        )
    )
),

# this is temporary, should be stored in model i guess
#   and be able to be different types of objects
# also the parent in the Model should not need the graphic info

# this could be called "system"
/parent = {
    /x : 10.,
    /y : 10.,
    /width : 600.,
    /height : 800.,

    /time/start: 0.,
    /time/dur : 1000.,

    /time2pix : quote(lambda([t],
        (t / /parent./time/dur) * /parent./width
    )),

    /pix2time : quote(lambda([x],
        x * (/parent./time/dur / /parent./width)
    ))
},


# the `context` is the graphic-context, and requires the bounding box for symbols to offset from
# so the context is a union of the model and view data which the script uses to move between the two sides
# therefore the default values don't require graphic values, because the graphic values are contained in the view data (which is produced by the script )


/rectangle = {
# probably better not to use generic names for classes
# generic graphic items don't have /set/fromData?

    /default : {
    # not sure if the graphic information should be here already
        /x : 10.,
        /y : 10.,
        /width : 600.,
        /height : 800.,

        /time/start : 0,
        /time/dur : 1000.
    },

    /time2pix : quote(lambda([t],
        (t / /parent./time/dur) * /parent./width
    )),

    /pix2time : quote(lambda([x],
        x * (/parent./time/dur / /parent./width)
    )),

    /set/fromData : quote( 
        lambda([obj, context],

        )
    ),

    /set/fromGUI : {}
},

/noteline = {

    /default : {
        /r : 1,
        /dur : 100,
        /amp : 1
    },
    
    # layout idea, make svg element the same size as bounding box and use css to center icons
    /get/icon : quote(lambda([],
    {
        /key : "html",
        /val : {
            /new : "div",
            /id : "noteline-button-div",
            /parent : "palette",
            /child : {
                /new : "svg",
                /id : "noteline-icon",
                /onclick : "console.log('hello!')",
                /child : {            
                    /new : "g",
                    /class : "/noteline",
                    /children : [
                        {
                            /new : "circle",
                            /class : "notehead",
                            /r : 1,
                            /cy : 0,
                            /cx : 0
                        },
                        {
                            /new : "line",
                            /class : "durationLine",
                            /x1 : 0,
                            /y1 : 0,
                            /x2 : 30,
                            /y2 : 0
                        }
                    ]
                }
            }
        }
        
    
    })),

    # /amp, /pitch, /time, /dur, (parent?)
    
    # input data+context
    # output view object
    /set/fromData : quote( 
        lambda([obj, context],
            /parent_time2pix = context./time2pix,
            let({   notehead_radius : scale(obj./amp, 0., 100, 5., 20.),
                    pix_pitch_pos : context./y + scale(obj./pitch, 0., 127., context./height, 0.),
                    pix_start : context./x + /parent_time2pix( obj./time ),
                    pix_end : context./x + /parent_time2pix( obj./time ) + /parent_time2pix( obj./dur )
                }, # return the following object
                {
                    /new : "g",
                    /class : "/noteline",
                    /id : obj./id,
                    /children : [
                        {
                            /new : "circle",
                            /class : "notehead",
                            /r : notehead_radius,
                            /cy : pix_pitch_pos,
                            /cx : pix_start + notehead_radius
                        },
                        {
                            /new : "line",
                            /class : "durationLine",
                            /x1 : pix_start ,
                            /y1 : pix_pitch_pos,
                            /x2 : pix_end,
                            /y2 : pix_pitch_pos
                        }
                    ]
                }
            )
            
        )
    ),

    # input view object + mouse event + context
    # output data object
    /set/fromGUI : quote(
        lambda([viewobj, event, context],
            # later: put these in a let function, here now since /parent.pix2time() doesn't work
            # also later, parent probably should be passed in
            # to do new from click, select a reference object, if none are found, then the SVG is the parent?
            # do that in the UI script
                                
            /parent_pix2time = context./pix2time,
            /test = 111,
            let({
                    default : /noteline./default
                },
                cond(                 
                    event./symbolistAction == "newFromClick_down",
                    {
                        /class : "/noteline",
                        /id : event./id,
                        /pitch : scale( event./xy[[1]] - context./y, context./height, 0., 0., 127.),
                        /time : /parent_pix2time( event./xy[[0]] - context./x + default./r ),
                        /dur : default./dur,
                        /amp : default./amp
                    },
                    event./symbolistAction == "transformed", #&& /noteline./isValid(obj),
                    let({
                            notehead : /helper/getChildByClass( viewobj, "notehead" ),
                            durationLine : /helper/getChildByClass( viewobj, "durationLine" )
                        },
                        let({
                                xy : if ( bound(viewobj./transform),
                                            /transform/applyTransform( /transform/getMatrix(viewobj./transform), [notehead./cx, notehead./cy] ),
                                            [notehead./cx, notehead./cy] )
                            },
                            {
                                /class : "/noteline",
                                /id : viewobj./id,
                                /pitch : scale( xy[[1]] - context./y, context./height, 0., 0., 127.),
                                /time : /parent_pix2time( xy[[0]] - context./x - notehead./r ),  
                                /dur : /parent_pix2time( durationLine./x2 - durationLine./x1 ),
                                /amp : scale(notehead./r, 5., 20., 0., 100)
                            }
                        )
                    )
                    
                )
            )
            
        )
    ),


    # /amp, /pitch, /time, /dur, (parent?)
    /get/infoDisplay : quote(
        lambda([dataobj],
            {
                /key : "html",
                /val : {
                    /new : "div",
                    /parent : "info-panel",
                    /class : "object-info",
                    /text : "time: " + dataobj./time + "<br><br> pitch: " + dataobj./pitch
                }
            }
        )
    ),

   /get/fromTime : quote(
    lambda([obj, t],
        let({
                relTime : (t - obj./time) / obj./dur
            },
            if( relTime >= 0 && relTime <= 1,
                {
                    /relTime : relTime
                }
            )
        )
    ))
},

/playhead = {
    /set/fromTime : quote(
        lambda([t, context],
            /time2pix = context./time2pix,
            prog1(
                # later check if there are already view messages in place and union
                {
                    /view : {
                        /key : "svg",
                        /val : {
                            /new : "line",
                            /id : "playhead",
                            /class : "playhead",
                            /x1 : context./x + /time2pix( /t ),
                            /x2 : context./x + /time2pix( /t ),
                            /y1 : context./y,
                            /y2 : context./y + context./height
                        }
                    }
                }
            )
        )
    )
}