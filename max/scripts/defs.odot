


/transform/getMatrix = quote(lambda([matrix_str],
  if( strfind("matrix", matrix_str) != -1,
    float32(split(" ", strchar( aseq(7, strlen(matrix_str) - 2), matrix_str)))
  )
)),

/transform/applyTransform = quote(lambda([matrix, xy ],
  [  matrix[[0]] * xy[[0]] + matrix[[2]] * xy[[1]] + matrix[[4]], 
     matrix[[1]] * xy[[0]] + matrix[[3]] * xy[[1]] + matrix[[5]]
  ]
)),

/~/emptybundle = quote(lambda([b], 
	typetags(b) == '.' && length(getaddresses(b)) == 0 
)),

/~/hasAddress = quote(lambda([obj, addr],
  typetags(obj) == '.' && max( getaddresses(obj) == addr )
)),



/helper/getChildByClass = quote(
    lambda([obj, classname],
        /found = {},
        if( /~/hasAddress(obj, "/children") ,
            map( lambda([c],
                    if( c./class == classname,
                        /found = c
                    )
                ), obj./children
            )
        ),
        prog1(
            /found,
            delete(/found)
        )
    )
),



/helper/getChildByClass_recursive = quote(
    lambda([obj, classname],
        if( /~/hasAddress(obj, "/class") && obj./class == classname,
            obj,
            progn(
                if( /~/hasAddress(obj, "/children"),
                    map( 
                        lambda([c],
                            if( !bound(/found) && /~/hasAddress(c, "/class") && c./class == classname,
                                /found = c,
                                /found = /helper/getChildByClass_recursive( c, classname )
                            )
                        ), obj./children
                    )
                ),
                if( bound(/found), 
                    prog1(
                    	/found,
                    	delete(/found)
                    )
                )
            )	
            
        )
    )
),


/helper/make/default_infoDisplay = quote(
    lambda([dataobj, bbox],
        {
            /key : "html",
            /val : {
                /parent : "forms",
                /new : "div",
                /style : {
                    /left : bbox./x+"px",
                    /top : bbox./bottom+10+"px"
                },
                /id : dataobj./id+"-infobox",
                /class : "infobox",
                /children : /helper/make/parms_inputs(dataobj)
            }
        }
    )
),

/helper/make/parms_inputs = quote(
    lambda([data],
            map(
                lambda([param],
                    let({
                            deslashed_name : join("", split("/", param))
                        },
                        if( deslashed_name == "id" || deslashed_name == "class",
                            [{
                                    /new : "span",
                                    /class : "infoparam",
                                    /text : param
                                }, {
                                    /new : "span",
                                    /class : "infovalue-noedit",
                                    /text : getbundlemember(data, param)
                            }], 
                            # else
                            [{
                                /new : "label",
                                /class : "infoparam",
                                /for : data./id+"-"+deslashed_name+"-input",
                                /text : param
                            }, {
                                /new : "input",
                                /class : "infovalue",
                                /type : "text",
                                /id : data./id+"-"+deslashed_name+"-input",
                                /placeholder : getbundlemember(data, param),
                                /onkeydown : " if( event.key == 'Enter' ){
                                    drawsocket.send( {
                                        event:  {
                                            key: 'symbolistEvent',
                                            val: {
                                                id: '"+ data./id +"',
                                                symbolistAction: 'updateSymbolData',
                                                param: '"+ param +"',
                                                value: this.value
                                            }
                                        }
                                    });
                                }",
								/onmousedrag : "
                                    console.log(event);
                                "
                            }]
                            
                        )
                    )
                ), getaddresses(data)
            )
        
    )
)